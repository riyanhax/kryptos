<?php
class MenuController extends Muzyka_Admin
{
    protected $baseUrl = '/menu';

    /** @var Application_Model_Menu */
    protected $menuModel;

    /** @var Application_Model_RegistryMenu */
    protected $registrymenuModel;

    public function __construct(Zend_Controller_Request_Abstract $request, Zend_Controller_Response_Abstract $response, array $invokeArgs = array())
    {
        parent::__construct($request, $response, $invokeArgs);
        $this->menuModel = Application_Service_Utilities::getModel('Menu');
        $this->registrymenuModel = Application_Service_Utilities::getModel('RegistryMenu');
        $this->registryModel = Application_Service_Utilities::getModel('Registry');
    }


    public function init()
    {
        return parent::init(); // TODO: Change the autogenerated stub
        $this->view->baseUrl = $this->baseUrl;
    }

    public function indexAction()
    {
        /*menu list */
		$order=' odr ASC';
        $menuList = $this->menuModel->getList($conditions = array(), $limit = null,$order);
        //$menuList = $this->menuModel->getList();
        $this->view->baseUrl = $this->baseUrl;
        $data = array();
        foreach ($menuList as $row) {
            $tmp = array();
            $tmp['id'] = $row['id'];
            $tmp['label'] = $row['label'];
            $tmp['path'] = $row['path'];
            $tmp['parent_id'] = $row['parent_id'];
            $tmp['icon'] = $row['icon'];
            $tmp['rel'] = $row['rel'];
            array_push($data, $tmp);
        }

        $itemsByReference = array();

        // Build array of item references:
        foreach($data as $key => &$item) {
            $itemsByReference[$item['id']] = &$item;
            // Children array:
            $itemsByReference[$item['id']]['children'] = array();
        }

        // Set items as children of the relevant parent item.
        foreach($data as $key => &$item) {
            //echo "<pre>";print_r($itemsByReference[$item['parent_id']]);die;
            if ($item['parent_id'] && isset($itemsByReference[$item['parent_id']])) {
                $itemsByReference [$item['parent_id']]['children'][] = &$item;
            }
        }

        // Remove items that were added to parents elsewhere:
        foreach($data as $key => &$item) {
            if (is_array($data[$key]['children'])) {
                if (count($data[$key]['children']) == 0) {
                    unset($data[$key]['children']);
                }
            }
            if($item['parent_id'] && isset($itemsByReference[$item['parent_id']])) {
                unset($data[$key]);
            }
        }

        $tmp = [];
        foreach($data as $key => $value) {
            array_push($tmp, $value);
        }
        
        $json_menu = json_encode($tmp, JSON_UNESCAPED_UNICODE);
        $this->view->data = $json_menu;

        $excludes = 
        $select = $this->registryModel->select()
                ->from($this->registryModel, array(
                    'label' => 'title',
                    'id' => 'id'
                ))
                ->where('id NOT IN (SELECT registery_id from registery_menu)');
        $registry = $this->registryModel->fetchAll($select)->toArray();

        $json_menu2 = json_encode($registry, JSON_UNESCAPED_UNICODE);
        $this->view->data2 = $json_menu2;
    }

    public function saveAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $jsonStr = $data['json'];
        $obj = json_decode($jsonStr,true);

        echo $jsonStr;
    }


public function updateOrderAction(){
	
	$this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
		 $data = $this->_request->getPost();
        $dataJson = $data['data'];
		 $dataObj = json_decode($dataJson, true);
	foreach ($dataObj as $key =>$val){
		$this->menuModel->updateOrder($key, $val);
	}
}
    public function insertRowAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $jsonStr = $data['data'];
        $dataObj = json_decode($jsonStr, true);

        $result = $this->menuModel->addNewRow($dataObj);

        echo $jsonStr;
    }

    public function updateRowAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $jsonStr = $data['data'];
        $dataObj = json_decode($jsonStr, true);

        $result = $this->menuModel->updateRowData($dataObj);

        echo $jsonStr;
    }

    public function updateDataAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $dataJson = $data['data'];
        $parentJson = $data['parent_data'];

        $dataObj = json_decode($dataJson, true);
        $parentObj = json_decode($parentJson, true);

        $parentId = $parentObj['id'];
        $id = $dataObj['id'];

        $result = $this->menuModel->updateParentData($parentId, $id);

        echo json_encode($result);
    }

    public function removeDataAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $data = $this->_request->getPost();
        $dataJson = $data['data'];
        $option = $data['option'];
        $dataObj = json_decode($dataJson, true);

        if ($option == 'normal'){
            foreach ($dataObj as $data){
                if($data['rel'] == 'registry'){
                    $path = $data['path'];
                    $parent_row = array(
                        'activate' => 0,
                    );
                    $where = $this->registrymenuModel->getAdapter()->quoteInto('path = ?', $path);
                    $this->registrymenuModel->delete($where);
                }
            }
        }elseif($option == 'parentchild' || $option == 'parent'){
            foreach ($dataObj as $data){

                if($data['path'] == '/registry'){
                    $parent_row = array(
                        'activate' => 0,
                    );
                    $where = $this->registrymenuModel->getAdapter()->quoteInto('activate = ?', '1');
                    $this->registrymenuModel->update($parent_row, $where);
                }
            }
        }
        $result = $this->menuModel->removeData($dataObj,$option);
        echo json_encode($result);
    }

    /*menu buttons button by rahul */
    public function moveUpAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $child_id = $data['child_id'];
        $parent_id = $data['parentid'];

        if ($child_id && $parent_id){
            $result =   $this->menuModel->moveupdown($child_id,$parent_id);

        }
        echo json_encode($result);
    }

    public function moveDownAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $child_id = $data['child_id'];
        $parent_id = $data['parentid'];

        if ($child_id && $parent_id){
            $result =   $this->menuModel->moveupdown($child_id,$parent_id);

        }
        echo json_encode($result);
    }

    public function moveInAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $in_id = $data['child_id'];
        $parent_id = $data['parentid'];

        if ($in_id && $parent_id){
            $result =   $this->menuModel->movein($in_id,$parent_id);

        }
        echo json_encode($result);
    }

    public function moveOutAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();

        $data = $this->_request->getPost();
        $out_id = $data['content_out'];
        $parent_id = $data['parentid'];

        if ($out_id && $parent_id){
            $result =   $this->menuModel->moveout($out_id,$parent_id);

        }
        echo json_encode($result);
    }

    public function registryMenuAction() {
        $this->_helper->layout()->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $data = $this->_request->getPost();
        $lang = $data['lang'];

        if (count($lang) > 0) {
            $result_registry_menu =   $this->registrymenuModel->registryData($lang, true);

            if($result_registry_menu == true){
                foreach ($lang as $data){
                    
                    $row = $this->registryModel->findOne($data)->toArray();
                    $registryMenuItem = $this->menuModel->getOne(['path = ?' => '/registry']);
                    if($registryMenuItem)
                        $registryMenu = $registryMenuItem->toArray();
                    $insert_menu = array(
                        'label' => $row['title'],
                        'path' => '/registry-entries/index/registry_id/'.$row['id'],
                        'icon' => $row['icon'],
                        'rel' => 'registry',
                        'parent_id' => $registryMenu['id'],
                    );
                    $result[] = $this->menuModel->addNewRow($insert_menu);
                    $insert_menu['registery_id'] = $row['id'];
                    $this->registrymenuModel->addNewRow($insert_menu);


                }
            }else{
                return false;
            }
        }

        echo json_encode($result);
    }

    /*end menu buttons button by rahul */
}